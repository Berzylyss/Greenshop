
---

- name: Installer et configurer HAProxy
  hosts: loadbalancer
  become: true

  vars:
    backend_servers:
      - { name: "docker1", address: "192.168.10.110", port: 80 }
      - { name: "docker2", address: "192.168.10.120", port: 80 }
      - { name: "docker3", address: "192.168.10.130", port: 80 }
  tasks:
    - name: Installer HAProxy
      apt:
        name: haproxy
        state: present
        update_cache: yes

    - name: Configurer HAProxy
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify: Restart HAProxy

    - name: Activer et démarrer HAProxy
      service:
        name: haproxy
        state: started
        enabled: true

  handlers:
    - name: Restart HAProxy
      service:
        name: haproxy
        state: restarted





########################################Installation de Docker sur les serveurs#########################################
- name: Installer Docker sur les serveurs
  hosts: docker_servers
  become: true
  tasks:
    - name: Mettre à jour la liste des paquets
      ansible.builtin.apt:
        update_cache: yes

    - name: Installer les dépendances
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Ajouter la clé GPG officielle de Docker
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter le dépôt APT Docker
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable

    - name: Installer Docker
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest

        - name: Télécharger l’image Docker depuis Docker Hub
      docker_image:
        name: berzylyss/greenshopweb
        source: pull

    - name: Démarrer le conteneur Docker
      docker_container:
        name: mon_conteneur
        image: berzylyss/greenshopweb
        state: started
        restart_policy: always
        ports:
          - "8080:80"  # Expose le port 80 du conteneur sur le port 8080 de l’hôte

    - name: S'assurer que Docker est démarré
      ansible.builtin.service:
        name: docker
        state: started

###################################Installation de MariaDB###########################################

- name: Installer MariaDB sur un serveur dédié
  hosts: dbservers
  become: true

  vars_files:
    - secrets.yaml

  vars:
    mariadb_database: "greenshop"
    mariadb_user: "usergreen"

  tasks:
    - name: Installer MariaDB server
      apt:
        name: mariadb-server
        state: present
        update_cache: yes

    - name: Démarrer et activer le service MariaDB
      service:
        name: mariadb
        state: started
        enabled: true

    - name: Sécuriser l'installation de MariaDB (définir mot de passe root)
      mysql_user:
        name: root
        host: localhost
        password: "{{ mariadb_root_password }}"
        check_implicit_admin: true
        login_unix_socket: /var/run/mysqld/mysqld.sock
      ignore_errors: yes  # ignore si déjà défini

    - name: Supprimer les utilisateurs anonymes
      mysql_user:
        name: ''
        host_all: true
        state: absent
        login_user: root
        login_password: "{{ mariadb_root_password }}"

    - name: Télécharger le fichier init.sql depuis GitHub
      get_url:
        url: "https://raw.githubusercontent.com/Berzylyss/Greenshop/main/greenshop-db/init.sql"
        dest: "/tmp/init.sql"
        mode: '0644'

    - name: Importer le fichier init.sql dans la base de données
      mysql_db:
        name: "{{ mariadb_database }}"
        state: import
        target: /tmp/init.sql
        login_user: root
        login_password: "{{ mariadb_root_password }}"

    - name: Supprimer la base de test
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mariadb_root_password }}"

    

# il accorde les droits à user
    - name: Créer l'utilisateur et lui accorder les droits
      mysql_user:
        name: "{{ mariadb_user }}"
        password: "{{ mariadb_user_password }}"
        priv: "{{ mariadb_database }}.*:ALL"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ mariadb_root_password }}"

    - name: Modifier bind-address pour autoriser connexions externes
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
        backup: yes
      notify: Redémarrer MariaDB

    - name: Ouvrir le port 3306 dans le firewall (UFW)
      ufw:
        rule: allow
        port: '3306'
        proto: tcp
      when: ansible_facts.os_family == 'Ubuntu'

  handlers:
    - name: Redémarrer MariaDB
      service:
        name: mariadb
        state: restarted
