---
- name: Installer et configurer HAProxy
  hosts: VM_Loadbalancer 
  become: true
  vars:
    backend_servers:
      - { name: "docker1", address: "192.168.10.11", port: 80 }
      - { name: "docker2", address: "192.168.10.12", port: 80 }
      - { name: "docker3", address: "192.168.10.13", port: 80 }
  tasks:
    - name: Installer HAProxy
      apt:
        name: haproxy
        state: present
        update_cache: yes

    - name: Configurer HAProxy
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify: Restart HAProxy

    - name: Activer et démarrer HAProxy
      service:
        name: haproxy
        state: started
        enabled: true

  handlers:
    - name: Restart HAProxy
      service:
        name: haproxy
        state: restarted

# --------------------------------------------------------------------

- name: Installer Docker sur les serveurs web
  hosts: docker_vm_web
  become: true
  tasks:
    - name: Mettre à jour les paquets
      apt:
        update_cache: yes

    - name: Installer dépendances
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Ajouter clé GPG Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter dépôt Docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable

    - name: Installer Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest

    - name: S'assurer que Docker est démarré
      service:
        name: docker
        state: started
        enabled: true

    - name: Lancer conteneur web
      docker_container:
        name: greenshop-web
        image: berzylyss/greenshop-web:latest
        state: started
        restart_policy: always
        ports:
          - "8080:80"

# --------------------------------------------------------------------

- name: Installer et configurer MySQL
  hosts: docker_vm_SQL
  become: true
  vars_files:
    - secrets.yaml
  vars:
    mysql_database: greenshop
    mysql_user: usergreen
  tasks:
    - name: Définir mot de passe root
      mysql_user:
        name: root
        host: localhost
        password: "{{ mysql_root_password }}"
        check_implicit_admin: true
        login_unix_socket: /var/run/mysqld/mysqld.sock
      ignore_errors: yes

    - name: Supprimer les utilisateurs anonymes
      mysql_user:
        name: ''
        host_all: true
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Télécharger init.sql
      get_url:
        url: https://raw.githubusercontent.com/Berzylyss/Greenshop/main/greenshop-db/init.sql
        dest: /tmp/init.sql
        mode: '0644'

    - name: Importer la base
      mysql_db:
        name: "{{ mysql_database }}"
        state: import
        target: /tmp/init.sql
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Créer utilisateur applicatif
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_user_password }}"
        priv: "{{ mysql_database }}.*:ALL"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Autoriser connexions externes
      lineinfile:
        path: /etc/mysql/mysql.conf.d/50-server.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
        backup: yes
      notify: Redémarrer MySQL

  handlers:
    - name: Redémarrer MySQL
      service:
        name: mysql
        state: restarted

# --------------------------------------------------------------------

- name: Monitoring avec Docker Compose
  hosts: supervision
  become: yes
  tasks:
    - name: Installer Docker et Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Déployer la stack
      copy:
        dest: /opt/docker-compose.yml
        content: |
          version: '3.9'
          services:
            prometheus:
              image: prom/prometheus
              ports: ["9090:9090"]
            cadvisor:
              image: gcr.io/cadvisor/cadvisor:latest
              ports: ["8080:8080"]
            grafana:
              image: grafana/grafana
              ports: ["3000:3000"]
              depends_on: [prometheus]
    - name: Lancer Docker Compose
      command: docker compose -f /opt/docker-compose.yml up -d
      args:
        chdir: /opt
