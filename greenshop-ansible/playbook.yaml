
---

- name: Installer et configurer HAProxy
  hosts: VM_Loadbalancer 
  become: true

  vars:
    backend_servers:
      - { name: "docker1", address: "192.168.10.11", port: 80 }
      - { name: "docker2", address: "192.168.10.12", port: 80 }
      - { name: "docker3", address: "192.168.10.13", port: 80 }
  tasks:
    - name: Installer HAProxy
      apt:
        name: haproxy
        state: present
        update_cache: yes

    - name: Configurer HAProxy
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify: Restart HAProxy

    - name: Activer et démarrer HAProxy
      service:
        name: haproxy
        state: started
        enabled: true

  handlers:
    - name: Restart HAProxy
     ---
- hosts: supervision
  become: yes
  tasks:
    - name: Installer dépendances pour Docker
      apt:
        name: [apt-transport-https, ca-certificates, curl, software-properties-common]
        state: present
        update_cache: yes

    - name: Ajouter clé GPG Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter dépôt Docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Installer Docker et Docker Compose
      apt:
        name: [docker-ce, docker-ce-cli, containerd.io, docker-compose-plugin]
        state: present
        update_cache: yes

    - name: Assurer que Docker est démarré
      service:
        name: docker
        state: started
        enabled: yes

    - name: Déployer la stack avec docker-compose
      copy:
        dest: /opt/docker-compose.yml
        content: |
          version: '3.9'
          services:
            prometheus:
              image: prom/prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
            cadvisor:
              image: gcr.io/cadvisor/cadvisor:latest
              ports:
                - "8080:8080"
              volumes:
                - /:/rootfs:ro
                - /var/run:/var/run:ro
                - /sys:/sys:ro
                - /var/lib/docker/:/var/lib/docker:ro
            grafana:
              image: grafana/grafana
              ports:
                - "3000:3000"
              depends_on:
                - prometheus
            web:
              image: greenshop-local-web:latest
              ports:
                - "80:80"
              depends_on:
                - db
            db:
              image: mysql:8
              container_name: greenshop-db
              environment:
                MYSQL_ROOT_PASSWORD: secret
                MYSQL_DATABASE: greenshop
                MYSQL_USER: greenshopuser
                MYSQL_PASSWORD: greenshopdb
              volumes:
                - db_data:/var/lib/mysql
                - ./greenshop-db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

          volumes:
            db_data:

    - name: Lancer docker compose
      command: docker compose -f /opt/docker compose.yml up -d
      args:
        chdir: /opt

  service:
        name: haproxy
        state: restarted



########################################Installation de Docker sur les serveurs#########################################
- name: Installer Docker sur les serveurs
  hosts: docker_vm_web
  become: true
  tasks:
    - name: Mettre à jour la liste des paquets
      ansible.builtin.apt:
        update_cache: yes

    - name: Installer les dépendances
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Ajouter la clé GPG officielle de Docker
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter le dépôt APT Docker
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable

    - name: Installer Docker
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest

    - name: Télécharger l’image Docker depuis Docker Hub
      community.docker.docker_image:
        name: berzylyss/greenshop-web:latest
        source: pull        login_password: "{{ mysql_root_password }}"

    - name: Supprimer la base de test
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"



    - name: Démarrer le conteneur Docker
      docker_container:
        name: mon_conteneur
        image: berzylyss/greenshop-web:latest
        state: started
        restart_policy: always
        ports:
          - "8080:80"  # Expose le port 80 du conteneur sur le port 8080 de l’hôte

    - name: S'assurer que Docker est démarré
      ansible.builtin.service:
        name: docker
        state: started

###################################Installation de MySQL###########################################

- name: Installer SQL sur un serveur dédié
  hosts: docker_vm_SQL
  become: true

  vars_files:
    - secrets.yaml

  vars:
    mysql_database: "greenshop"
    mysql_user: "usergreen"

  tasks:
    - name: Sécuriser l'installation de MySQL (définir mot de passe root)
      mysql_user:
        name: root
        host: localhost
        password: "{{ mysql_root_password }}"
        check_implicit_admin: true
        login_unix_socket: /var/run/mysqld/mysqld.sock
      ignore_errors: yes  

    - name: Supprimer les utilisateurs anonymes
      mysql_user:
        name: ''
        host_all: true
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Télécharger le fichier init.sql depuis GitHub
      get_url:
        url: "https://raw.githubusercontent.com/Berzylyss/Greenshop/main/greenshop-db/init.sql"
        dest: "/tmp/init.sql"
        mode: '0644'

    - name: Importer le fichier init.sql dans la base de données
      mysql_db:
        name: "{{ mysql_database }}"
        state: import
        target: /tmp/init.sql
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Supprimer la base de test
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

# accorde les droits à user
    - name: Créer l'utilisateur et lui accorder les droits
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_user_password }}"
        priv: "{{ mysql_database }}.*:ALL"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Modifier bind-address pour autoriser connexions externes
      lineinfile:
        path: /etc/mysql/mysql.conf.d/50-server.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
        backup: yes
      notify: Redémarrer MySQL

    - name: Ouvrir le port 3306 dans le firewall (UFW)
      ufw:
        rule: allow
        port: '3306'
        proto: tcp
      when: ansible_facts.os_family == 'Ubuntu'

  handlers:
    - name: Redémarrer MySQL
      service:
        name: mysql
        state: restarted

- name: Configuration monitoring
  hosts: supervision
  become: yes
  tasks:
    - name: Ajouter dépôt Docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Installer Docker et Docker Compose
      apt:
        name: [docker-ce, docker-ce-cli, containerd.io, docker-compose-plugin]
        state: present
        update_cache: yes

    - name: Assurer que Docker est démarré
      service:
        name: docker
        state: started
        enabled: yes

    - name: Déployer la stack avec docker-compose
      copy:
        dest: /opt/docker-compose.yml
        content: |
          version: '3.9'
          services:
            prometheus:
              image: prom/prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
            cadvisor:
              image: gcr.io/cadvisor/cadvisor:latest
              ports:
                - "8080:8080"
              volumes:
                - /:/rootfs:ro
                - /var/run:/var/run:ro
                - /sys:/sys:ro
                - /var/lib/docker/:/var/lib/docker:ro
            grafana:
              image: grafana/grafana
              ports:
                - "3000:3000"
              depends_on:
                - prometheus
            web:
              image: greenshop-local-web:latest
              ports:
                - "80:80"
              depends_on:
                - db
            db:
              image: mysql:8
              container_name: greenshop-db
              environment:
                MYSQL_ROOT_PASSWORD: secret
                MYSQL_DATABASE: greenshop
                MYSQL_USER: greenshopuser
                MYSQL_PASSWORD: greenshopdb
              volumes:
                - db_data:/var/lib/mysql
                - ./greenshop-db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

          volumes:
            db_data:
    - name: Lancer docker compose
      command: docker compose -f /opt/docker compose.yml up -d
      args:
        chdir: /opt

 